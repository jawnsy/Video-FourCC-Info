NAME
    Video::FourCC::Info - Find information about codecs specified as Four
    Character Code

$Id$

DESCRIPTION
    In order for video players to detect the algorithm required to decode a
    given video file, a four-byte sequence called a Four Character Code is
    written somewhere in the header of the file. This ensures that the
    detected codec format is independent of the file extension, which may be
    incorrect due to human error or for some other reason.

    This is similar to the four-byte "magic number" used by the UNIX file(1)
    command to roughly determine a file format.

    As far as I know, this is a case sensitive code, since it is
    byte-dependent, and is not actually an alphanumeric code (although it is
    represented as such).

COMPATIBILITY
    This module was tested under Perl 5.10.0, using Debian Linux. However,
    because it's Pure Perl and doesn't do anything too obscure, it should be
    compatible with any version of Perl that supports its prerequisite
    modules.

    If you encounter any problems on a different version or architecture,
    please contact the maintainer.

AUTHOR
    Jonathan Yu <frequency@cpan.org>

ACKNOWLEDGEMENTS
    *   Thanks to Allen Day <allenday@ucla.edu> and Benjamin R. Ginter
        <bginter@asicommunications.com>, developers of Video::Info, which
        inspired the creation of this module.

SUPPORT
    You can find documentation for this module with the perldoc command.

        perldoc Video::FourCC::Info

    You can also look for information at:

    *   AnnoCPAN: Annotated CPAN documentation

        <http://annocpan.org/dist/Video-FourCC-Info>

    *   CPAN Ratings

        <http://cpanratings.perl.org/d/Video-FourCC-Info>

    *   Search CPAN

        <http://search.cpan.org/dist/Video-FourCC-Info>

    *   CPAN Request Tracker

        <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Video-FourCC-Info>

    *   CPAN Testing Service (Kwalitee Tests)

        <http://cpants.perl.org/dist/overview/Video-FourCC-Info>

REPOSITORY

    You can access the most recent development version of this module at:

    L<http://svn.ali.as/cpan/trunk/Test-DistManifest>

    If you are a CPAN developer and would like to make modifications to the
    code base, please contact Adam Kennedy E<lt>adamk@cpan.orgE<gt>, the
    repository administrator. I only ask that you contact me first to discuss
    the changes you wish to make to the distribution.

FEEDBACK
    Please send relevant comments, rotten tomatoes and suggestions directly
    to the maintainer noted above.

    If you have a bug report or feature request, please file them on the
    CPAN Request Tracker at <http://rt.cpan.org>. If you are able to submit
    your bug report in the form of failing unit tests, you are strongly
    encouraged to do so. Regular bug reports are always accepted and
    appreciated via the CPAN bug tracker.

SEE ALSO
    Video::Info, a module for extracting information like the Four Character
    Code from arbitrary files.

CAVEATS
  KNOWN BUGS
    There are no known bugs as of this release.

  LIMITATIONS
    *   This module has not been tested very thoroughly with Unicode.

DATA SOURCE
    The FourCC database of owner and descriptions come from data extracted
    from GSpot v2.70a, a freeware Codec Information utility. The registration
    dates come courtesy of Microsoft Corporation, accessed online at:
    <http://msdn.microsoft.com/en-us/library/ms867195.aspx#fourcccodes>

LICENSE
    Copyright (C) 2009 by Jonathan Yu <frequency@cpan.org>

    This package is distributed under the same terms as Perl itself.

DISCLAIMER OF WARRANTY
    This software is provided by the copyright holders and contributors "AS
    IS" and ANY EXPRESS OR IMPLIED WARRANTIES, including, but not limited
    to, the IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
    PARTICULAR PURPOSE ARE DISCLAIMED.

    In no event shall the copyright owner or contributors be liable for any
    direct, indirect, incidental, special, exemplary or consequential
    damages (including, but not limited to, procurement of substitute goods
    or services; loss of use, data or profits; or business interruption)
    however caused and on any theory of liability, whether in contract,
    strict liability or tort (including negligence or otherwise) arising in
    any way out of the use of this software, even if advised of the
    possibility of such damage.